{"version":3,"sources":["components/titleBar/titleBar.js","components/scoreField/scoreField.js","components/card/card.js","components/cardArea/cardArea.js","App.js","serviceWorker.js","index.js"],"names":["TitleBar","props","react_default","a","createElement","className","title","instructions","children","ScoreField","state","score","_this","this","message","nextProps","prevState","React","Component","Card","onClick","ident","src","image","alt","CardArea","cards","shuffle","cardArr","i","length","j","Math","floor","random","_ref","setState","images","clickArr","App","currentScore","highScore","resetScore","incrementScore","beenClicked","id","console","log","includes","push","map","elem","card_card","key","titleBar_titleBar","scoreField_scoreField","cardArea_cardArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0608d445.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./titleBar.css\";\r\n// import ScoreField from \"../scoreField/scoreField\"\r\n\r\nfunction TitleBar(props) {\r\n\r\n  return (\r\n    <div className = \"header\" >\r\n    <div className=\"title\">{props.title}</div>\r\n    <div className=\"instructions\">{props.instructions}</div>\r\n    <div className=\"scoreBar\">\r\n      {props.children}\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default TitleBar;","import React from \"react\";\r\nimport \"./scoreField.css\";\r\n\r\nclass ScoreField extends React.Component {\r\n\r\n  state = {\r\n    score: this.props.score\r\n  }\r\n\r\n  render (){\r\n    return(\r\n      <div className=\"score\">{this.props.message} {this.state.score}</div>\r\n    )\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState){\r\n    if(nextProps.score!==prevState.score){\r\n      return{score: nextProps.score}\r\n    }\r\n    else\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default ScoreField;","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\n\r\nfunction Card(props) {\r\n\r\n  const handleClick = () => {\r\n    props.onClick(props.ident);\r\n  }\r\n\r\n  return (\r\n    <div onClick={handleClick} className=\"wrapper\">\r\n      <img src={props.image} alt=\"card\"></img>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./cardArea.css\";\r\n\r\nclass CardArea extends React.Component {\r\n\r\n  state = {\r\n    cards: this.props.cards\r\n  }\r\n\r\n  // great code I found online for shuffling an array\r\n  shuffle = () => {\r\n    let cardArr = this.state.cards;\r\n    for (let i = cardArr.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [cardArr[i], cardArr[j]] = [cardArr[j], cardArr[i]];\r\n    }\r\n    this.setState({cards: cardArr})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // when clicked, shuffle cards\r\n      <div className=\"cardArea\" onClick={this.shuffle}>\r\n      {this.state.cards}</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CardArea;","import React from 'react';\nimport './App.css';\nimport TitleBar from './components/titleBar/titleBar'\nimport ScoreField from \"./components/scoreField/scoreField\"\nimport Card from \"./components/card/card\"\nimport CardArea from \"./components/cardArea/cardArea\"\n\nconst images = [\n  \"http://static.tumblr.com/6e35e391a99d92051bf5a6e289809a07/02nxold/lfznyt5s6/tumblr_static_dl9xutmk8jcw0kgcok888g8gw.png\",\n  \"https://40.media.tumblr.com/a68d4d221ff0f00b086b51e308c98a0f/tumblr_n5nvgx6NZg1qdi5kdo2_500.png\",\n  \"https://40.media.tumblr.com/5cdb24611d318207ef40eb4cf3352a52/tumblr_nchkpd4oHU1qjhwq1o1_500.png\",\n  \"http://68.media.tumblr.com/4359bd2819188659a9ab07cda508dadc/tumblr_o0wyvkR9Wu1uw74fvo6_1280.png\",\n  \"https://68.media.tumblr.com/0a4b343aac9a737bf7dc80f641535ee9/tumblr_ogtosa2MFo1vctkauo1_400.png\",\n  \"http://68.media.tumblr.com/d37613ae4e10c482b4e7c7b00e204649/tumblr_npyl6jzwqx1uw74fvo7_400.png\",\n  \"http://68.media.tumblr.com/6145ccf7d97d730b1fcff6d37e360db7/tumblr_nz81q7nG8V1r9ee9go6_500.png\",\n  \"https://66.media.tumblr.com/c6b07606dbbff3755945687e9b194155/tumblr_no3cq2XZI11tg7ue6o1_500.jpg\",\n  \"https://68.media.tumblr.com/b582560cd64b3772a217e16038344e39/tumblr_omnhppP9G91v19j17o1_500.png\"\n]\n\nlet clickArr = [];\n\nclass App extends React.Component {\n\n  state = {\n    title: \"Hi there! This is the clicky game!\",\n    instructions: \"Start clicking to get started, just don't click the same card twice!\",\n    currentScore: 0,\n    highScore: 0\n  }\n\n  resetScore = () => {\n    this.setState({ currentScore: 0 })\n  }\n\n  incrementScore = () => {\n    // increment score and high score\n    if (this.state.currentScore === this.state.highScore) {\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        highScore: this.state.highScore + 1,\n        instructions: \"New high score!\"\n      })\n\n      //increment only score\n    } else {\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        instructions: \"Nailed it!\"\n      })\n    }\n\n    // display if all cards have been clicked\n    if ((this.state.currentScore + 1) % images.length === 0) {\n      this.setState({ instructions: \"Level Cleared, cards reset! Keep going!\" })\n    }\n  }\n\n  beenClicked = (id) => {\n    console.log(\"Clicked:\", id)\n\n    // check if this card has been clicked, if not increment score and add to tracking array\n    if (!clickArr.includes(id)) {\n      clickArr.push(id);\n      this.incrementScore();\n      // clear tracking array if all\n      if (clickArr.length === images.length) clickArr = [];\n    } else {\n      this.resetScore();\n      clickArr = [];\n      this.setState({\n        instructions: \"Oops! Try playing again!\"\n      })\n    }\n  }\n\n  cards = {\n    cardArr: images.map((elem, i) => {\n      return <Card\n        key={i}\n        ident={i}\n        image={elem}\n        onClick={this.beenClicked}\n      />\n    })\n  }\n\n  render() {\n    return (\n      // structure of components:\n      // app component as entry point\n      //    title bar component\n      //      two of score component\n      //    game div\n      //      9 of card component\n      <div className=\"App\" >\n        <TitleBar\n          title={this.state.title}\n          instructions={this.state.instructions}>\n          <ScoreField message={\"Current Score: \"} score={this.state.currentScore} />\n          <ScoreField message={\"High Score: \"} score={this.state.highScore} />\n        </TitleBar>\n\n        {/* loops over img array and makes a card for each */}\n        {/* <div className=\"cardArea\">\n          {this.cards.cardArr}\n        </div> */}\n        <CardArea cards={this.cards.cardArr}/>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}